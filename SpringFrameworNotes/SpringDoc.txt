*********IoC Container*********
IoC Container is responsible 
- to instantiate the application class (instantiate means to call the constructor of the class that creates instance/object of the type of that class or 
	create object of that class) 
- to configure the object
- to assemble the dependancies between the objects

Types of IoC Container
- BeanFactory- org.springframework.beans.factory.BeanFactory	

- ApplicationContext- org.springframework.context.ApplicationContext - is built on top the BeanFactory
These two interfaces acts as IoC Container

***BeanFactory***

- The XmlBeanFactory is the implementation class for the BeanFactory interface. 
	To use the BeanFactory, we need to create the instance of XmlBeanFactory class as given below:
	
	Resource resource=new ClassPathResource("applicationContext.xml");  
	BeanFactory factory=new XmlBeanFactory(resource);

- constructor of the XmlBeanFactory class receives the Resource object so we need to pass the resource object to create the object of BeanFactory.

*** ApplicationContext***

-	It is better to use ApplicationContext than BeanFactory because it provied extra features
-	ClassPathXmlApplicationContext class is implementation of ApplicationContext interface. 
		TO use applicationContext we need to create object of ClassPathXmlApplicationContext/instantiate ClassPathXmlApplicationContext
		
		ApplicationContext context =   new ClassPathXmlApplicationContext("applicationContext.xml");
- constructor of ClassPathXmlApplicationContext class receives string, so we can pass the name of the xml file to create the instance of ApplicationContext.

*********Dependancy Injection(DI)*********
-	is design pattern that removes dependancies from the code which makes application easy to manage and test
-	makes our programming code loosly coupled

example,
	class Employee{  
		Address address;  
	  
		Employee(Address address){  //setting address through constructor
			this.address=address;  
		}  
		public void setAddress(Address address){  //setting address through setter method
			this.address=address;  
		}  
	  
	} 
	
- Spring Framework provieds two ways to Inject Dependancy
	1) by constructor
	2) by setter method
	
---- Dependency Injection by Constructor Example ----
* We can inject the dependency by constructor. 
	The <constructor-arg> subelement of <bean> is used for constructor injection
-- Constructor injection with primitive type(int,floa,long,double,char) and String based 

<bean id="employeebean" class="com.di.example.Employee">
<constructor-arg value="10" type="int" ></constructor-arg> <!-- type indicates constructor of type int is invoked injecting primitive values -->
<constructor-arg value="Sonoo" ></constructor-arg> <!--If you don't specify the type attribute, by default string type constructor will be invoked. -->
</bean>

-- Constructor injection with Dependent object

If there is HAS-A relationship between the classes, 
	we create the instance of dependent object (contained object) (eg. Address) first then pass it as an argument of the main class (Employee) constructor.
	
	<bean id="A1" class="com.di.example.Address">
	<constructor-arg value="Mumbai"></constructor-arg>
	<constructor-arg value="Maharashtra"></constructor-arg>
	<constructor-arg value="India"></constructor-arg>
	</bean>

	<bean id="employeebean" class="com.di.example.Employee">
	<constructor-arg value="10" type="int" ></constructor-arg>
	<constructor-arg value="Sonoo" ></constructor-arg> <!--If you don't specify the type attribute, by default string type constructor will be invoked. -->
	<constructor-arg>
	<ref bean='A1'/>
	</constructor-arg>
	</bean>
	
-- Constructor Injection with Collection Example

There can be used three elements inside the <constructor-arg> element.

It can be:
-list
-set
-map

<bean id="q" class="com.javatpoint.Question">  
<constructor-arg value="111"></constructor-arg>  
<constructor-arg value="What is java?"></constructor-arg>  
<constructor-arg>  
<list>  
<value>Java is a programming language</value>  
<value>Java is a Platform</value>  
<value>Java is an Island of Indonasia</value>  
</list>  
</constructor-arg>  
</bean>

-- Constructor Injection with Non-String Collection (having Dependent Object) Example

<bean id="ans1" class="com.javatpoint.Answer">  
<constructor-arg value="1"></constructor-arg>  
<constructor-arg value="Java is a programming language"></constructor-arg>  
<constructor-arg value="John"></constructor-arg>  
</bean>  
  
<bean id="ans2" class="com.javatpoint.Answer">  
<constructor-arg value="2"></constructor-arg>  
<constructor-arg value="Java is a Platform"></constructor-arg>  
<constructor-arg value="Ravi"></constructor-arg>  
</bean>  
  
<bean id="q" class="com.javatpoint.Question">  
<constructor-arg value="111"></constructor-arg>  
<constructor-arg value="What is java?"></constructor-arg>  
<constructor-arg>  
<list>  
<ref bean="ans1"/>  
<ref bean="ans2"/>  
</list>  
</constructor-arg>  
</bean>

-- Constructor Injection with Map Example

<bean id="q" class="com.javatpoint.Question">  
<constructor-arg value="11"></constructor-arg>  
<constructor-arg value="What is Java?"></constructor-arg>  
<constructor-arg>  
<map>  
<entry key="Java is a Programming Language"  value="Ajay Kumar"></entry>  
<entry key="Java is a Platform" value="John Smith"></entry>  
<entry key="Java is an Island" value="Raj Kumar"></entry>  
</map>  
</constructor-arg>  
</bean>

-- Constructor Injection with Non-String Map (having dependent Object) Example

<bean id="answer1" class="com.javatpoint.Answer">  
<constructor-arg value="1"></constructor-arg>  
<constructor-arg value="Java is a Programming Language"></constructor-arg>  
<constructor-arg value="12/12/2001"></constructor-arg>  
</bean>  

<bean id="answer2" class="com.javatpoint.Answer">  
<constructor-arg value="2"></constructor-arg>  
<constructor-arg value="Java is a Platform"></constructor-arg>  
<constructor-arg value="12/12/2003"></constructor-arg>  
</bean>  
  
<bean id="user1" class="com.javatpoint.User">  
<constructor-arg value="1"></constructor-arg>  
<constructor-arg value="Arun Kumar"></constructor-arg>  
<constructor-arg value="arun@gmail.com"></constructor-arg>  
</bean>  

<bean id="user2" class="com.javatpoint.User">  
<constructor-arg value="2"></constructor-arg>  
<constructor-arg value="Varun Kumar"></constructor-arg>  
<constructor-arg value="Varun@gmail.com"></constructor-arg>  
</bean>  
  
<bean id="q" class="com.javatpoint.Question">  
<constructor-arg value="1"></constructor-arg>  
<constructor-arg value="What is Java?"></constructor-arg>  
<constructor-arg>  
<map>  
<entry key-ref="answer1" value-ref="user1"></entry>  
<entry key-ref="answer2" value-ref="user2"></entry>  
</map>  
</constructor-arg>  
</bean>


-- Inheriting Bean in Spring

	By using the parent attribute of bean, we can specify the inheritance relation between the beans. 
	In such case, parent bean values will be inherited to the current bean.
	
	<bean id="e1" class="com.example.Employee">
		<constructor-arg value="101" type="int"></constructor-arg>
		<constructor-arg value="sachin"></constructor-arg>
	</bean>

	<bean id="address1" class="com.example.Address">
		<constructor-arg value="21,Lohianagar"></constructor-arg>  
		<constructor-arg value="Ghaziabad"></constructor-arg>  
		<constructor-arg value="UP"></constructor-arg>  
		<constructor-arg value="USA"></constructor-arg>
	</bean>

	<bean id="e2" class="com.example.Employee" parent="e1"> <!-- parent bean values will be inherited to the current bean. -->
		<constructor-arg ref="address1"></constructor-arg>
	</bean>

---- Dependency Injection by Setter Method Example ----

The <property> subelement of <bean> is used for setter injection

-- Setter Method injection with primitive type(int,floa,long,double,char) and String based

	<bean id="e1" class="com.example.Employee">
		<property name="id">
			<value>20</value>
		</property>
		<property name="name">
			<value>sachin</value>
		</property>
		<property name="city">
			<value>Mumbai</value>
		</property>
    </bean>

--Setter Injection with Dependent Object Example

<bean id="address1" class="com.javatpoint.Address">  
<property name="addressLine1" value="51,Lohianagar"></property>  
<property name="city" value="Ghaziabad"></property>  
<property name="state" value="UP"></property>  
<property name="country" value="India"></property>  
</bean>  
  
<bean id="obj" class="com.javatpoint.Employee">  
<property name="id" value="1"></property>  
<property name="name" value="Sachin Yadav"></property>  
<property name="address" ref="address1"></property>  
</bean>

-- Setter Injection with Collection Example

<bean id="q" class="com.javatpoint.Question">  
<property name="id" value="1"></property>  
<property name="name" value="What is Java?"></property>  
<property name="answers">  
<list>  
<value>Java is a programming language</value>  
<value>Java is a platform</value>  
<value>Java is an Island</value>  
</list>  
</property>  
</bean>

-- Setter Injection with Non-String Collection (having Dependent Object) Example

<bean id="answer1" class="com.javatpoint.Answer">  
<property name="id" value="1"></property>  
<property name="name" value="Java is a programming language"></property>  
<property name="by" value="Ravi Malik"></property>  
</bean>  

<bean id="answer2" class="com.javatpoint.Answer">  
<property name="id" value="2"></property>  
<property name="name" value="Java is a platform"></property>  
<property name="by" value="Sachin"></property>  
</bean>  
  
<bean id="q" class="com.javatpoint.Question">  
<property name="id" value="1"></property>  
<property name="name" value="What is Java?"></property>  
<property name="answers">  
<list>  
<ref bean="answer1"/>  
<ref bean="answer2"/>  
</list>  
</property>  
</bean>

-- Setter Injection with Map Example

we are using map as the answer for a question that have answer as the key and username as the value. Here, we are using key and value pair both as a string

<bean id="q" class="com.javatpoint.Question">  
<property name="id" value="1"></property>  
<property name="name" value="What is Java?"></property>  
<property name="answers">  
<map>  
<entry key="Java is a programming language"  value="Sonoo Jaiswal"></entry>  
<entry key="Java is a Platform" value="Sachin Yadav"></entry>  
</map>  
</property>  
</bean>

-- Setter Injection with Non-String Map (having dependent Object) Example

<bean id="answer1" class="com.javatpoint.Answer">  
<property name="id" value="1"></property>  
<property name="answer" value="Java is a Programming Language"></property>  
<property name="postedDate" value="12/12/2001"></property>  
</bean>  
<bean id="answer2" class="com.javatpoint.Answer">  
<property name="id" value="2"></property>  
<property name="answer" value="Java is a Platform"></property>  
<property name="postedDate" value="12/12/2003"></property>  
</bean>  
  
<bean id="user1" class="com.javatpoint.User">  
<property name="id" value="1"></property>  
<property name="name" value="Arun Kumar"></property>  
<property name="email" value="arun@gmail.com"></property>  
</bean>  
<bean id="user2" class="com.javatpoint.User">  
<property name="id" value="2"></property>  
<property name="name" value="Varun Kumar"></property>  
<property name="email" value="Varun@gmail.com"></property>  
</bean>  
  
<bean id="q" class="com.javatpoint.Question">  
<property name="id" value="1"></property>  
<property name="name" value="What is Java?"></property>  
<property name="answers">  
<map>  
<entry key-ref="answer1" value-ref="user1"></entry>  
<entry key-ref="answer2" value-ref="user2"></entry>  
</map>  
</property>  
</bean>

*********** Difference between constructor and setter injection ********************

1. Partial dependency: can be injected using setter injection but it is not possible by constructor. 
Suppose there are 3 properties in a class, having 3 arg constructor and setters methods. 
In such case, if you want to pass information for only one property, it is possible by setter method only.

2. Overriding: Setter injection overrides the constructor injection. 
If we use both constructor and setter injection, IOC container will use the setter injection

3. Changes: We can easily change the value by setter injection. 
It doesn't create a new bean instance always like constructor. So setter injection is flexible than constructor injection.

*********** Autowiring in Spring **********************
- This feature of springframework enables injection of object dependency implicitly.
- It internally used setter or constructor injection
- Autowiring can't be used to inject primitive type and string values. can be used for reference(object reference) type only
- We don't need to write the code to inject the dependency explicitly

********************** Spring JdbcTemplate Tutorial **********************
JdbcTemplate - powerful mechanism to connect to database and execute sql



